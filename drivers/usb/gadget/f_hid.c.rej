--- drivers/usb/gadget/f_hid.c
+++ drivers/usb/gadget/f_hid.c
@@ -18,9 +18,7 @@
 #include <linux/poll.h>
 #include <linux/uaccess.h>
 #include <linux/wait.h>
-#include <linux/delay.h>
 #include <linux/usb/g_hid.h>
-#include "f_hid.h"
 
 static int major, minors;
 static struct class *hidg_class;
@@ -54,43 +52,6 @@ struct f_hidg {
 	struct usb_ep			*in_ep;
 };
 
-/* Hacky device list to fix f_hidg_write being called after device destroyed.
-   It covers only most common race conditions, there will be rare crashes anyway. */
-enum { HACKY_DEVICE_LIST_SIZE = 4 };
-static struct f_hidg *hacky_device_list[HACKY_DEVICE_LIST_SIZE];
-static void hacky_device_list_add(struct f_hidg *hidg)
-{
-	int i;
-	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
-		if (!hacky_device_list[i]) {
-			hacky_device_list[i] = hidg;
-			return;
-		}
-	}
-	pr_err("%s: too many devices, not adding device %p\n", __func__, hidg);
-}
-static void hacky_device_list_remove(struct f_hidg *hidg)
-{
-	int i;
-	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
-		if (hacky_device_list[i] == hidg) {
-			hacky_device_list[i] = NULL;
-			return;
-		}
-	}
-	pr_err("%s: cannot find device %p\n", __func__, hidg);
-}
-static int hacky_device_list_check(struct f_hidg *hidg)
-{
-	int i;
-	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
-		if (hacky_device_list[i] == hidg) {
-			return 0;
-		}
-	}
-	return 1;
-}
-
 static inline struct f_hidg *func_to_hidg(struct usb_function *f)
 {
 	return container_of(f, struct f_hidg, func);
@@ -179,11 +140,6 @@ static ssize_t f_hidg_read(struct file *file, char __user *buffer,
 	if (!access_ok(VERIFY_WRITE, buffer, count))
 		return -EFAULT;
 
-	if (hacky_device_list_check(hidg)) {
-		pr_err("%s: trying to read from device %p that was destroyed\n", __func__, hidg);
-		return -EIO;
-	}
-
 	spin_lock_irqsave(&hidg->spinlock, flags);
 
 #define READ_COND (hidg->set_report_buff != NULL)
@@ -238,11 +194,6 @@ static ssize_t f_hidg_write(struct file *file, const char __user *buffer,
 	if (!access_ok(VERIFY_READ, buffer, count))
 		return -EFAULT;
 
-	if (hacky_device_list_check(hidg)) {
-		pr_err("%s: trying to write to device %p that was destroyed\n", __func__, hidg);
-		return -EIO;
-	}
-
 	mutex_lock(&hidg->lock);
 
 #define WRITE_COND (!hidg->write_pending)
@@ -257,11 +208,6 @@ static ssize_t f_hidg_write(struct file *file, const char __user *buffer,
 				hidg->write_queue, WRITE_COND))
 			return -ERESTARTSYS;
 
-		if (hacky_device_list_check(hidg)) {
-			pr_err("%s: trying to write to device %p that was destroyed\n", __func__, hidg);
-			return -EIO;
-		}
-
 		mutex_lock(&hidg->lock);
 	}
 
@@ -302,18 +248,7 @@ static unsigned int f_hidg_poll(struct file *file, poll_table *wait)
 	struct f_hidg	*hidg  = file->private_data;
 	unsigned int	ret = 0;
 
-	if (hacky_device_list_check(hidg)) {
-		pr_err("%s: trying to poll device %p that was destroyed\n", __func__, hidg);
-		return -EIO;
-	}
-
 	poll_wait(file, &hidg->read_queue, wait);
-
-	if (hacky_device_list_check(hidg)) {
-		pr_err("%s: trying to poll device %p that was destroyed\n", __func__, hidg);
-		return -EIO;
-	}
-
 	poll_wait(file, &hidg->write_queue, wait);
 
 	if (WRITE_COND)
@@ -412,12 +347,7 @@ static int hidg_setup(struct usb_function *f,
 	case ((USB_DIR_IN | USB_TYPE_CLASS | USB_RECIP_INTERFACE) << 8
 		  | HID_REQ_GET_PROTOCOL):
 		VDBG(cdev, "get_protocol\n");
-		length = min_t(unsigned, length, 1);
-		if (hidg->bInterfaceSubClass == USB_INTERFACE_SUBCLASS_BOOT)
-			((u8 *) req->buf)[0] = 0;	/* Boot protocol */
-		else
-			((u8 *) req->buf)[0] = 1;	/* Report protocol */
-		goto respond;
+		goto stall;
 		break;
 
 	case ((USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE) << 8
@@ -431,14 +361,6 @@ static int hidg_setup(struct usb_function *f,
 	case ((USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE) << 8
 		  | HID_REQ_SET_PROTOCOL):
 		VDBG(cdev, "set_protocol\n");
-		length = 0;
-		if (hidg->bInterfaceSubClass == USB_INTERFACE_SUBCLASS_BOOT) {
-			if (value == 0)		/* Boot protocol */
-				goto respond;
-		} else {
-			if (value == 1)		/* Report protocol */
-				goto respond;
-		}
 		goto stall;
 		break;
 
@@ -513,15 +448,13 @@ const struct file_operations f_hidg_fops = {
 	.llseek		= noop_llseek,
 };
 
-static int hidg_bind(struct usb_configuration *c, struct usb_function *f)
+static int __init hidg_bind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct usb_ep		*ep;
 	struct f_hidg		*hidg = func_to_hidg(f);
 	int			status;
 	dev_t			dev;
 
-	pr_info("%s: creating device %p\n", __func__, hidg);
-
 	/* allocate instance-specific interface IDs, and patch descriptors */
 	status = usb_interface_id(c, f);
 	if (status < 0)
@@ -585,7 +518,6 @@ static int __init hidg_bind(struct usb_configuration *c, struct usb_function *f)
 		goto fail;
 
 	device_create(hidg_class, NULL, dev, NULL, "%s%d", "hidg", hidg->minor);
-	hacky_device_list_add(hidg);
 
 	return 0;
 
@@ -607,21 +539,12 @@ static void hidg_unbind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct f_hidg *hidg = func_to_hidg(f);
 
-	pr_info("%s: destroying device %p\n", __func__, hidg);
-	/* This does not cover all race conditions, only most common one */
-	mutex_lock(&hidg->lock);
-	hacky_device_list_remove(hidg);
-	mutex_unlock(&hidg->lock);
-
 	device_destroy(hidg_class, MKDEV(major, hidg->minor));
 	cdev_del(&hidg->cdev);
 
 	/* disable/free request and end point */
 	usb_ep_disable(hidg->in_ep);
-	/* TODO: calling this function crash kernel,
-	   not calling this funct ion crash kernel inside f_hidg_write */
-	/* usb_ep_dequeue(hidg->in_ep, hidg->req); */
-
+	usb_ep_dequeue(hidg->in_ep, hidg->req);
 	kfree(hidg->req->buf);
 	usb_ep_free_request(hidg->in_ep, hidg->req);
 
@@ -657,7 +580,7 @@ static struct usb_gadget_strings *ct_func_strings[] = {
 /*-------------------------------------------------------------------------*/
 /*                             usb_configuration                           */
 
-int hidg_bind_config(struct usb_configuration *c,
+int __init hidg_bind_config(struct usb_configuration *c,
 			    struct hidg_func_descriptor *fdesc, int index)
 {
 	struct f_hidg *hidg;
@@ -708,7 +631,7 @@ int __init hidg_bind_config(struct usb_configuration *c,
 	return status;
 }
 
-int ghid_setup(struct usb_gadget *g, int count)
+int __init ghid_setup(struct usb_gadget *g, int count)
 {
 	int status;
 	dev_t dev;
